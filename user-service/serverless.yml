# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: user-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x

  environment:
    JWT_SECRET: ${ssm:/aws/reference/secretsmanager/learn-portal/jwt-secret}
    USERS_TABLE: Users-${sls:stage}
    STUDENTS_TABLE: Students-${sls:stage}
    TRAINERS_TABLE: Trainers-${sls:stage}
    SPECIALIZATIONS_TABLE: Specializations-${sls:stage}

  httpApi:
    cors: true
    authorizers:
      userAuthorizer:
        type: request
        functionName: userAuthorizer
      studentAuthorizer:
        type: request
        functionName: studentAuthorizer
      trainerAuthorizer:
        type: request
        functionName: trainerAuthorizer

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/*"

  # you can overwrite defaults here
  stage: dev
  region: eu-north-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - helpers/**
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  userAuthorizer:
    handler: auth/authorizers.userAuthorizer
  studentAuthorizer:
    handler: auth/authorizers.studentAuthorizer
  trainerAuthorizer:
    handler: auth/authorizers.trainerAuthorizer

  register:
    handler: auth/register.handler
    events:
      - httpApi:
          path: /auth/register
          method: post

  login:
    handler: auth/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: post

  getMe:
    handler: user/getMe.handler
    events:
      - httpApi:
          path: /users/me
          method: get
          authorizer:
            name: userAuthorizer

  deleteMe:
    handler: user/deleteMe.handler
    events:
      - httpApi:
          path: /users/me
          method: delete
          authorizer:
            name: userAuthorizer

  updateMe:
    handler: user/updateMe.handler
    events:
      - httpApi:
          path: /users/me
          method: patch
          authorizer:
            name: userAuthorizer

  uploadPhoto:
    handler: user/uploadPhoto.handler
    events:
      - httpApi:
          path: /users/upload-photo
          method: post
          authorizer:
            name: userAuthorizer

  updatePassword:
    handler: user/updatePassword.handler
    events:
      - httpApi:
          path: /users/update-password
          method: put
          authorizer:
            name: userAuthorizer

  getActiveTrainers:
    handler: user/getActiveTrainers.handler
    events:
      - httpApi:
          path: /users/trainers
          method: get
          authorizer:
            name: studentAuthorizer

  addTrainer:
    handler: user/addTrainer.handler
    events:
      - httpApi:
          path: /users/trainers
          method: post
          authorizer:
            name: studentAuthorizer

  getMyStudents:
    handler: user/getMyStudents.handler
    events:
      - httpApi:
          path: /users/students
          method: get
          authorizer:
            name: trainerAuthorizer

  getAllSpecializations:
    handler: user/getAllSpecializations.handler
    events:
      - httpApi:
          path: /users/trainers/specializations
          method: get
          authorizer:
            name: trainerAuthorizer

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    UsersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UsernameIndex
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    StudentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STUDENTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    TrainersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TRAINERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    SpecializationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SPECIALIZATIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
